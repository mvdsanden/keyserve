// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ksvc_keyserveservice.proto

#include "ksvc_keyserveservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ksvc_5fcryptokey_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CryptoKey_ksvc_5fcryptokey_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ksvc_5fkeyring_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyRing_ksvc_5fkeyring_2eproto;
namespace MvdS {
namespace ksvc {
class CreateKeyRingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateKeyRingRequest> _instance;
} _CreateKeyRingRequest_default_instance_;
class CreateCryptoKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCryptoKeyRequest> _instance;
} _CreateCryptoKeyRequest_default_instance_;
}  // namespace ksvc
}  // namespace MvdS
static void InitDefaultsscc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MvdS::ksvc::_CreateCryptoKeyRequest_default_instance_;
    new (ptr) ::MvdS::ksvc::CreateCryptoKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MvdS::ksvc::CreateCryptoKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto}, {
      &scc_info_CryptoKey_ksvc_5fcryptokey_2eproto.base,}};

static void InitDefaultsscc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MvdS::ksvc::_CreateKeyRingRequest_default_instance_;
    new (ptr) ::MvdS::ksvc::CreateKeyRingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MvdS::ksvc::CreateKeyRingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto}, {
      &scc_info_KeyRing_ksvc_5fkeyring_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ksvc_5fkeyserveservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ksvc_5fkeyserveservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ksvc_5fkeyserveservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ksvc_5fkeyserveservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateKeyRingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateKeyRingRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateKeyRingRequest, keyringid_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateKeyRingRequest, keyring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateCryptoKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateCryptoKeyRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateCryptoKeyRequest, cryptokeyid_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateCryptoKeyRequest, cryptokey_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CreateCryptoKeyRequest, skipinitialversioncreation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MvdS::ksvc::CreateKeyRingRequest)},
  { 8, -1, sizeof(::MvdS::ksvc::CreateCryptoKeyRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MvdS::ksvc::_CreateKeyRingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MvdS::ksvc::_CreateCryptoKeyRequest_default_instance_),
};

const char descriptor_table_protodef_ksvc_5fkeyserveservice_2eproto[] =
  "\n\032ksvc_keyserveservice.proto\022\tMvdS.ksvc\032"
  "\022ksvc_keyring.proto\032\024ksvc_cryptokey.prot"
  "o\"^\n\024CreateKeyRingRequest\022\016\n\006parent\030\001 \001("
  "\t\022\021\n\tkeyRingId\030\002 \001(\t\022#\n\007keyRing\030\003 \001(\0132\022."
  "MvdS.ksvc.KeyRing\"\212\001\n\026CreateCryptoKeyReq"
  "uest\022\016\n\006parent\030\001 \001(\t\022\023\n\013cryptoKeyId\030\002 \001("
  "\t\022\'\n\tcryptoKey\030\003 \001(\0132\024.MvdS.ksvc.CryptoK"
  "ey\022\"\n\032skipInitialVersionCreation\030\004 \001(\0102\247"
  "\001\n\017KeyserveService\022F\n\rCreateKeyRing\022\037.Mv"
  "dS.ksvc.CreateKeyRingRequest\032\022.MvdS.ksvc"
  ".KeyRing\"\000\022L\n\017CreateCryptoKey\022!.MvdS.ksv"
  "c.CreateCryptoKeyRequest\032\024.MvdS.ksvc.Cry"
  "ptoKey\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ksvc_5fkeyserveservice_2eproto_deps[2] = {
  &::descriptor_table_ksvc_5fcryptokey_2eproto,
  &::descriptor_table_ksvc_5fkeyring_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ksvc_5fkeyserveservice_2eproto_sccs[2] = {
  &scc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto.base,
  &scc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ksvc_5fkeyserveservice_2eproto_once;
static bool descriptor_table_ksvc_5fkeyserveservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ksvc_5fkeyserveservice_2eproto = {
  &descriptor_table_ksvc_5fkeyserveservice_2eproto_initialized, descriptor_table_protodef_ksvc_5fkeyserveservice_2eproto, "ksvc_keyserveservice.proto", 496,
  &descriptor_table_ksvc_5fkeyserveservice_2eproto_once, descriptor_table_ksvc_5fkeyserveservice_2eproto_sccs, descriptor_table_ksvc_5fkeyserveservice_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ksvc_5fkeyserveservice_2eproto::offsets,
  file_level_metadata_ksvc_5fkeyserveservice_2eproto, 2, file_level_enum_descriptors_ksvc_5fkeyserveservice_2eproto, file_level_service_descriptors_ksvc_5fkeyserveservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ksvc_5fkeyserveservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ksvc_5fkeyserveservice_2eproto), true);
namespace MvdS {
namespace ksvc {

// ===================================================================

void CreateKeyRingRequest::InitAsDefaultInstance() {
  ::MvdS::ksvc::_CreateKeyRingRequest_default_instance_._instance.get_mutable()->keyring_ = const_cast< ::MvdS::ksvc::KeyRing*>(
      ::MvdS::ksvc::KeyRing::internal_default_instance());
}
class CreateKeyRingRequest::HasBitSetters {
 public:
  static const ::MvdS::ksvc::KeyRing& keyring(const CreateKeyRingRequest* msg);
};

const ::MvdS::ksvc::KeyRing&
CreateKeyRingRequest::HasBitSetters::keyring(const CreateKeyRingRequest* msg) {
  return *msg->keyring_;
}
void CreateKeyRingRequest::clear_keyring() {
  if (GetArenaNoVirtual() == nullptr && keyring_ != nullptr) {
    delete keyring_;
  }
  keyring_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateKeyRingRequest::kParentFieldNumber;
const int CreateKeyRingRequest::kKeyRingIdFieldNumber;
const int CreateKeyRingRequest::kKeyRingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateKeyRingRequest::CreateKeyRingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MvdS.ksvc.CreateKeyRingRequest)
}
CreateKeyRingRequest::CreateKeyRingRequest(const CreateKeyRingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  keyringid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.keyringid().size() > 0) {
    keyringid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keyringid_);
  }
  if (from.has_keyring()) {
    keyring_ = new ::MvdS::ksvc::KeyRing(*from.keyring_);
  } else {
    keyring_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MvdS.ksvc.CreateKeyRingRequest)
}

void CreateKeyRingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyringid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyring_ = nullptr;
}

CreateKeyRingRequest::~CreateKeyRingRequest() {
  // @@protoc_insertion_point(destructor:MvdS.ksvc.CreateKeyRingRequest)
  SharedDtor();
}

void CreateKeyRingRequest::SharedDtor() {
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyringid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete keyring_;
}

void CreateKeyRingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateKeyRingRequest& CreateKeyRingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateKeyRingRequest_ksvc_5fkeyserveservice_2eproto.base);
  return *internal_default_instance();
}


void CreateKeyRingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MvdS.ksvc.CreateKeyRingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyringid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && keyring_ != nullptr) {
    delete keyring_;
  }
  keyring_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateKeyRingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_parent(), ptr, ctx, "MvdS.ksvc.CreateKeyRingRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string keyRingId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_keyringid(), ptr, ctx, "MvdS.ksvc.CreateKeyRingRequest.keyRingId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MvdS.ksvc.KeyRing keyRing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_keyring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateKeyRingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MvdS.ksvc.CreateKeyRingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MvdS.ksvc.CreateKeyRingRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string keyRingId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_keyringid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->keyringid().data(), static_cast<int>(this->keyringid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MvdS.ksvc.CreateKeyRingRequest.keyRingId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MvdS.ksvc.KeyRing keyRing = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keyring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MvdS.ksvc.CreateKeyRingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MvdS.ksvc.CreateKeyRingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateKeyRingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MvdS.ksvc.CreateKeyRingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateKeyRingRequest.parent");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string keyRingId = 2;
  if (this->keyringid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->keyringid().data(), static_cast<int>(this->keyringid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateKeyRingRequest.keyRingId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keyringid(), output);
  }

  // .MvdS.ksvc.KeyRing keyRing = 3;
  if (this->has_keyring()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::keyring(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MvdS.ksvc.CreateKeyRingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateKeyRingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MvdS.ksvc.CreateKeyRingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateKeyRingRequest.parent");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string keyRingId = 2;
  if (this->keyringid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->keyringid().data(), static_cast<int>(this->keyringid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateKeyRingRequest.keyRingId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->keyringid(), target);
  }

  // .MvdS.ksvc.KeyRing keyRing = 3;
  if (this->has_keyring()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::keyring(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MvdS.ksvc.CreateKeyRingRequest)
  return target;
}

size_t CreateKeyRingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MvdS.ksvc.CreateKeyRingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string keyRingId = 2;
  if (this->keyringid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->keyringid());
  }

  // .MvdS.ksvc.KeyRing keyRing = 3;
  if (this->has_keyring()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *keyring_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateKeyRingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MvdS.ksvc.CreateKeyRingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateKeyRingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateKeyRingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MvdS.ksvc.CreateKeyRingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MvdS.ksvc.CreateKeyRingRequest)
    MergeFrom(*source);
  }
}

void CreateKeyRingRequest::MergeFrom(const CreateKeyRingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MvdS.ksvc.CreateKeyRingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.keyringid().size() > 0) {

    keyringid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keyringid_);
  }
  if (from.has_keyring()) {
    mutable_keyring()->::MvdS::ksvc::KeyRing::MergeFrom(from.keyring());
  }
}

void CreateKeyRingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MvdS.ksvc.CreateKeyRingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateKeyRingRequest::CopyFrom(const CreateKeyRingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MvdS.ksvc.CreateKeyRingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKeyRingRequest::IsInitialized() const {
  return true;
}

void CreateKeyRingRequest::Swap(CreateKeyRingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateKeyRingRequest::InternalSwap(CreateKeyRingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  keyringid_.Swap(&other->keyringid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(keyring_, other->keyring_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateKeyRingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCryptoKeyRequest::InitAsDefaultInstance() {
  ::MvdS::ksvc::_CreateCryptoKeyRequest_default_instance_._instance.get_mutable()->cryptokey_ = const_cast< ::MvdS::ksvc::CryptoKey*>(
      ::MvdS::ksvc::CryptoKey::internal_default_instance());
}
class CreateCryptoKeyRequest::HasBitSetters {
 public:
  static const ::MvdS::ksvc::CryptoKey& cryptokey(const CreateCryptoKeyRequest* msg);
};

const ::MvdS::ksvc::CryptoKey&
CreateCryptoKeyRequest::HasBitSetters::cryptokey(const CreateCryptoKeyRequest* msg) {
  return *msg->cryptokey_;
}
void CreateCryptoKeyRequest::clear_cryptokey() {
  if (GetArenaNoVirtual() == nullptr && cryptokey_ != nullptr) {
    delete cryptokey_;
  }
  cryptokey_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCryptoKeyRequest::kParentFieldNumber;
const int CreateCryptoKeyRequest::kCryptoKeyIdFieldNumber;
const int CreateCryptoKeyRequest::kCryptoKeyFieldNumber;
const int CreateCryptoKeyRequest::kSkipInitialVersionCreationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCryptoKeyRequest::CreateCryptoKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MvdS.ksvc.CreateCryptoKeyRequest)
}
CreateCryptoKeyRequest::CreateCryptoKeyRequest(const CreateCryptoKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  cryptokeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cryptokeyid().size() > 0) {
    cryptokeyid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cryptokeyid_);
  }
  if (from.has_cryptokey()) {
    cryptokey_ = new ::MvdS::ksvc::CryptoKey(*from.cryptokey_);
  } else {
    cryptokey_ = nullptr;
  }
  skipinitialversioncreation_ = from.skipinitialversioncreation_;
  // @@protoc_insertion_point(copy_constructor:MvdS.ksvc.CreateCryptoKeyRequest)
}

void CreateCryptoKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cryptokeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cryptokey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skipinitialversioncreation_) -
      reinterpret_cast<char*>(&cryptokey_)) + sizeof(skipinitialversioncreation_));
}

CreateCryptoKeyRequest::~CreateCryptoKeyRequest() {
  // @@protoc_insertion_point(destructor:MvdS.ksvc.CreateCryptoKeyRequest)
  SharedDtor();
}

void CreateCryptoKeyRequest::SharedDtor() {
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cryptokeyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cryptokey_;
}

void CreateCryptoKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCryptoKeyRequest& CreateCryptoKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCryptoKeyRequest_ksvc_5fkeyserveservice_2eproto.base);
  return *internal_default_instance();
}


void CreateCryptoKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MvdS.ksvc.CreateCryptoKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cryptokeyid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cryptokey_ != nullptr) {
    delete cryptokey_;
  }
  cryptokey_ = nullptr;
  skipinitialversioncreation_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateCryptoKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_parent(), ptr, ctx, "MvdS.ksvc.CreateCryptoKeyRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cryptoKeyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cryptokeyid(), ptr, ctx, "MvdS.ksvc.CreateCryptoKeyRequest.cryptoKeyId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MvdS.ksvc.CryptoKey cryptoKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cryptokey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skipInitialVersionCreation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          skipinitialversioncreation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateCryptoKeyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MvdS.ksvc.CreateCryptoKeyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MvdS.ksvc.CreateCryptoKeyRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cryptoKeyId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cryptokeyid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cryptokeyid().data(), static_cast<int>(this->cryptokeyid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MvdS.ksvc.CreateCryptoKeyRequest.cryptoKeyId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MvdS.ksvc.CryptoKey cryptoKey = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cryptokey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skipInitialVersionCreation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipinitialversioncreation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MvdS.ksvc.CreateCryptoKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MvdS.ksvc.CreateCryptoKeyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateCryptoKeyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MvdS.ksvc.CreateCryptoKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateCryptoKeyRequest.parent");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string cryptoKeyId = 2;
  if (this->cryptokeyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cryptokeyid().data(), static_cast<int>(this->cryptokeyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateCryptoKeyRequest.cryptoKeyId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cryptokeyid(), output);
  }

  // .MvdS.ksvc.CryptoKey cryptoKey = 3;
  if (this->has_cryptokey()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cryptokey(this), output);
  }

  // bool skipInitialVersionCreation = 4;
  if (this->skipinitialversioncreation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->skipinitialversioncreation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MvdS.ksvc.CreateCryptoKeyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCryptoKeyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MvdS.ksvc.CreateCryptoKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateCryptoKeyRequest.parent");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string cryptoKeyId = 2;
  if (this->cryptokeyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cryptokeyid().data(), static_cast<int>(this->cryptokeyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CreateCryptoKeyRequest.cryptoKeyId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->cryptokeyid(), target);
  }

  // .MvdS.ksvc.CryptoKey cryptoKey = 3;
  if (this->has_cryptokey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cryptokey(this), target);
  }

  // bool skipInitialVersionCreation = 4;
  if (this->skipinitialversioncreation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->skipinitialversioncreation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MvdS.ksvc.CreateCryptoKeyRequest)
  return target;
}

size_t CreateCryptoKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MvdS.ksvc.CreateCryptoKeyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string cryptoKeyId = 2;
  if (this->cryptokeyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cryptokeyid());
  }

  // .MvdS.ksvc.CryptoKey cryptoKey = 3;
  if (this->has_cryptokey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cryptokey_);
  }

  // bool skipInitialVersionCreation = 4;
  if (this->skipinitialversioncreation() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCryptoKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MvdS.ksvc.CreateCryptoKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCryptoKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCryptoKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MvdS.ksvc.CreateCryptoKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MvdS.ksvc.CreateCryptoKeyRequest)
    MergeFrom(*source);
  }
}

void CreateCryptoKeyRequest::MergeFrom(const CreateCryptoKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MvdS.ksvc.CreateCryptoKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.cryptokeyid().size() > 0) {

    cryptokeyid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cryptokeyid_);
  }
  if (from.has_cryptokey()) {
    mutable_cryptokey()->::MvdS::ksvc::CryptoKey::MergeFrom(from.cryptokey());
  }
  if (from.skipinitialversioncreation() != 0) {
    set_skipinitialversioncreation(from.skipinitialversioncreation());
  }
}

void CreateCryptoKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MvdS.ksvc.CreateCryptoKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCryptoKeyRequest::CopyFrom(const CreateCryptoKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MvdS.ksvc.CreateCryptoKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCryptoKeyRequest::IsInitialized() const {
  return true;
}

void CreateCryptoKeyRequest::Swap(CreateCryptoKeyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCryptoKeyRequest::InternalSwap(CreateCryptoKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cryptokeyid_.Swap(&other->cryptokeyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cryptokey_, other->cryptokey_);
  swap(skipinitialversioncreation_, other->skipinitialversioncreation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCryptoKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ksvc
}  // namespace MvdS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MvdS::ksvc::CreateKeyRingRequest* Arena::CreateMaybeMessage< ::MvdS::ksvc::CreateKeyRingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MvdS::ksvc::CreateKeyRingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MvdS::ksvc::CreateCryptoKeyRequest* Arena::CreateMaybeMessage< ::MvdS::ksvc::CreateCryptoKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MvdS::ksvc::CreateCryptoKeyRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
