// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ksvc_cryptokeyversiontemplate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ksvc_5fcryptokeyversiontemplate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ksvc_5fcryptokeyversiontemplate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ksvc_cryptokeyversionalgorithm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ksvc_5fcryptokeyversiontemplate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ksvc_5fcryptokeyversiontemplate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ksvc_5fcryptokeyversiontemplate_2eproto;
namespace MvdS {
namespace ksvc {
class CryptoKeyVersionTemplate;
class CryptoKeyVersionTemplateDefaultTypeInternal;
extern CryptoKeyVersionTemplateDefaultTypeInternal _CryptoKeyVersionTemplate_default_instance_;
}  // namespace ksvc
}  // namespace MvdS
PROTOBUF_NAMESPACE_OPEN
template<> ::MvdS::ksvc::CryptoKeyVersionTemplate* Arena::CreateMaybeMessage<::MvdS::ksvc::CryptoKeyVersionTemplate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MvdS {
namespace ksvc {

// ===================================================================

class CryptoKeyVersionTemplate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MvdS.ksvc.CryptoKeyVersionTemplate) */ {
 public:
  CryptoKeyVersionTemplate();
  virtual ~CryptoKeyVersionTemplate();

  CryptoKeyVersionTemplate(const CryptoKeyVersionTemplate& from);
  CryptoKeyVersionTemplate(CryptoKeyVersionTemplate&& from) noexcept
    : CryptoKeyVersionTemplate() {
    *this = ::std::move(from);
  }

  inline CryptoKeyVersionTemplate& operator=(const CryptoKeyVersionTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoKeyVersionTemplate& operator=(CryptoKeyVersionTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CryptoKeyVersionTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoKeyVersionTemplate* internal_default_instance() {
    return reinterpret_cast<const CryptoKeyVersionTemplate*>(
               &_CryptoKeyVersionTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CryptoKeyVersionTemplate* other);
  friend void swap(CryptoKeyVersionTemplate& a, CryptoKeyVersionTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoKeyVersionTemplate* New() const final {
    return CreateMaybeMessage<CryptoKeyVersionTemplate>(nullptr);
  }

  CryptoKeyVersionTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CryptoKeyVersionTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CryptoKeyVersionTemplate& from);
  void MergeFrom(const CryptoKeyVersionTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoKeyVersionTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MvdS.ksvc.CryptoKeyVersionTemplate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ksvc_5fcryptokeyversiontemplate_2eproto);
    return ::descriptor_table_ksvc_5fcryptokeyversiontemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MvdS.ksvc.CryptoKeyVersionAlgorithm algorithm = 1;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 1;
  ::MvdS::ksvc::CryptoKeyVersionAlgorithm algorithm() const;
  void set_algorithm(::MvdS::ksvc::CryptoKeyVersionAlgorithm value);

  // @@protoc_insertion_point(class_scope:MvdS.ksvc.CryptoKeyVersionTemplate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ksvc_5fcryptokeyversiontemplate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoKeyVersionTemplate

// .MvdS.ksvc.CryptoKeyVersionAlgorithm algorithm = 1;
inline void CryptoKeyVersionTemplate::clear_algorithm() {
  algorithm_ = 0;
}
inline ::MvdS::ksvc::CryptoKeyVersionAlgorithm CryptoKeyVersionTemplate::algorithm() const {
  // @@protoc_insertion_point(field_get:MvdS.ksvc.CryptoKeyVersionTemplate.algorithm)
  return static_cast< ::MvdS::ksvc::CryptoKeyVersionAlgorithm >(algorithm_);
}
inline void CryptoKeyVersionTemplate::set_algorithm(::MvdS::ksvc::CryptoKeyVersionAlgorithm value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:MvdS.ksvc.CryptoKeyVersionTemplate.algorithm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ksvc
}  // namespace MvdS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ksvc_5fcryptokeyversiontemplate_2eproto
