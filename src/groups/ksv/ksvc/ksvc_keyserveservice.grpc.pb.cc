// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ksvc_keyserveservice.proto

#include "ksvc_keyserveservice.pb.h"
#include "ksvc_keyserveservice.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MvdS {
namespace ksvc {

static const char* KeyserveService_method_names[] = {
  "/MvdS.ksvc.KeyserveService/CreateKeyRing",
  "/MvdS.ksvc.KeyserveService/CreateCryptoKey",
};

std::unique_ptr< KeyserveService::Stub> KeyserveService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyserveService::Stub> stub(new KeyserveService::Stub(channel));
  return stub;
}

KeyserveService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateKeyRing_(KeyserveService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCryptoKey_(KeyserveService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeyserveService::Stub::CreateKeyRing(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateKeyRingRequest& request, ::MvdS::ksvc::KeyRing* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateKeyRing_, context, request, response);
}

void KeyserveService::Stub::experimental_async::CreateKeyRing(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateKeyRingRequest* request, ::MvdS::ksvc::KeyRing* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateKeyRing_, context, request, response, std::move(f));
}

void KeyserveService::Stub::experimental_async::CreateKeyRing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MvdS::ksvc::KeyRing* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateKeyRing_, context, request, response, std::move(f));
}

void KeyserveService::Stub::experimental_async::CreateKeyRing(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateKeyRingRequest* request, ::MvdS::ksvc::KeyRing* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateKeyRing_, context, request, response, reactor);
}

void KeyserveService::Stub::experimental_async::CreateKeyRing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MvdS::ksvc::KeyRing* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateKeyRing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MvdS::ksvc::KeyRing>* KeyserveService::Stub::AsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MvdS::ksvc::KeyRing>::Create(channel_.get(), cq, rpcmethod_CreateKeyRing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MvdS::ksvc::KeyRing>* KeyserveService::Stub::PrepareAsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MvdS::ksvc::KeyRing>::Create(channel_.get(), cq, rpcmethod_CreateKeyRing_, context, request, false);
}

::grpc::Status KeyserveService::Stub::CreateCryptoKey(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest& request, ::MvdS::ksvc::CryptoKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCryptoKey_, context, request, response);
}

void KeyserveService::Stub::experimental_async::CreateCryptoKey(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest* request, ::MvdS::ksvc::CryptoKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCryptoKey_, context, request, response, std::move(f));
}

void KeyserveService::Stub::experimental_async::CreateCryptoKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MvdS::ksvc::CryptoKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCryptoKey_, context, request, response, std::move(f));
}

void KeyserveService::Stub::experimental_async::CreateCryptoKey(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest* request, ::MvdS::ksvc::CryptoKey* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCryptoKey_, context, request, response, reactor);
}

void KeyserveService::Stub::experimental_async::CreateCryptoKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MvdS::ksvc::CryptoKey* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCryptoKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MvdS::ksvc::CryptoKey>* KeyserveService::Stub::AsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MvdS::ksvc::CryptoKey>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MvdS::ksvc::CryptoKey>* KeyserveService::Stub::PrepareAsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MvdS::ksvc::CryptoKey>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKey_, context, request, false);
}

KeyserveService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyserveService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyserveService::Service, ::MvdS::ksvc::CreateKeyRingRequest, ::MvdS::ksvc::KeyRing>(
          std::mem_fn(&KeyserveService::Service::CreateKeyRing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyserveService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyserveService::Service, ::MvdS::ksvc::CreateCryptoKeyRequest, ::MvdS::ksvc::CryptoKey>(
          std::mem_fn(&KeyserveService::Service::CreateCryptoKey), this)));
}

KeyserveService::Service::~Service() {
}

::grpc::Status KeyserveService::Service::CreateKeyRing(::grpc::ServerContext* context, const ::MvdS::ksvc::CreateKeyRingRequest* request, ::MvdS::ksvc::KeyRing* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyserveService::Service::CreateCryptoKey(::grpc::ServerContext* context, const ::MvdS::ksvc::CreateCryptoKeyRequest* request, ::MvdS::ksvc::CryptoKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MvdS
}  // namespace ksvc

