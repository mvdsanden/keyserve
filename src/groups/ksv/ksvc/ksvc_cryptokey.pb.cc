// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ksvc_cryptokey.proto

#include "ksvc_cryptokey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ksvc_5fcryptokeyversion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKeyVersion_ksvc_5fcryptokeyversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ksvc_5fcryptokeyversiontemplate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKeyVersionTemplate_ksvc_5fcryptokeyversiontemplate_2eproto;
namespace MvdS {
namespace ksvc {
class CryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey> _instance;
} _CryptoKey_default_instance_;
}  // namespace ksvc
}  // namespace MvdS
static void InitDefaultsCryptoKey_ksvc_5fcryptokey_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MvdS::ksvc::_CryptoKey_default_instance_;
    new (ptr) ::MvdS::ksvc::CryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MvdS::ksvc::CryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CryptoKey_ksvc_5fcryptokey_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCryptoKey_ksvc_5fcryptokey_2eproto}, {
      &scc_info_CryptoKeyVersion_ksvc_5fcryptokeyversion_2eproto.base,
      &scc_info_CryptoKeyVersionTemplate_ksvc_5fcryptokeyversiontemplate_2eproto.base,}};

void InitDefaults_ksvc_5fcryptokey_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey_ksvc_5fcryptokey_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ksvc_5fcryptokey_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ksvc_5fcryptokey_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ksvc_5fcryptokey_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ksvc_5fcryptokey_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CryptoKey, name_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CryptoKey, primary_),
  PROTOBUF_FIELD_OFFSET(::MvdS::ksvc::CryptoKey, versiontemplate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MvdS::ksvc::CryptoKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MvdS::ksvc::_CryptoKey_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ksvc_5fcryptokey_2eproto = {
  {}, AddDescriptors_ksvc_5fcryptokey_2eproto, "ksvc_cryptokey.proto", schemas,
  file_default_instances, TableStruct_ksvc_5fcryptokey_2eproto::offsets,
  file_level_metadata_ksvc_5fcryptokey_2eproto, 1, file_level_enum_descriptors_ksvc_5fcryptokey_2eproto, file_level_service_descriptors_ksvc_5fcryptokey_2eproto,
};

const char descriptor_table_protodef_ksvc_5fcryptokey_2eproto[] =
  "\n\024ksvc_cryptokey.proto\022\tMvdS.ksvc\032\033ksvc_"
  "cryptokeyversion.proto\032#ksvc_cryptokeyve"
  "rsiontemplate.proto\"\205\001\n\tCryptoKey\022\014\n\004nam"
  "e\030\001 \001(\t\022,\n\007primary\030\002 \001(\0132\033.MvdS.ksvc.Cry"
  "ptoKeyVersion\022<\n\017versionTemplate\030\003 \001(\0132#"
  ".MvdS.ksvc.CryptoKeyVersionTemplateb\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ksvc_5fcryptokey_2eproto = {
  false, InitDefaults_ksvc_5fcryptokey_2eproto, 
  descriptor_table_protodef_ksvc_5fcryptokey_2eproto,
  "ksvc_cryptokey.proto", &assign_descriptors_table_ksvc_5fcryptokey_2eproto, 243,
};

void AddDescriptors_ksvc_5fcryptokey_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_ksvc_5fcryptokeyversion_2eproto,
    ::AddDescriptors_ksvc_5fcryptokeyversiontemplate_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ksvc_5fcryptokey_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ksvc_5fcryptokey_2eproto = []() { AddDescriptors_ksvc_5fcryptokey_2eproto(); return true; }();
namespace MvdS {
namespace ksvc {

// ===================================================================

void CryptoKey::InitAsDefaultInstance() {
  ::MvdS::ksvc::_CryptoKey_default_instance_._instance.get_mutable()->primary_ = const_cast< ::MvdS::ksvc::CryptoKeyVersion*>(
      ::MvdS::ksvc::CryptoKeyVersion::internal_default_instance());
  ::MvdS::ksvc::_CryptoKey_default_instance_._instance.get_mutable()->versiontemplate_ = const_cast< ::MvdS::ksvc::CryptoKeyVersionTemplate*>(
      ::MvdS::ksvc::CryptoKeyVersionTemplate::internal_default_instance());
}
class CryptoKey::HasBitSetters {
 public:
  static const ::MvdS::ksvc::CryptoKeyVersion& primary(const CryptoKey* msg);
  static const ::MvdS::ksvc::CryptoKeyVersionTemplate& versiontemplate(const CryptoKey* msg);
};

const ::MvdS::ksvc::CryptoKeyVersion&
CryptoKey::HasBitSetters::primary(const CryptoKey* msg) {
  return *msg->primary_;
}
const ::MvdS::ksvc::CryptoKeyVersionTemplate&
CryptoKey::HasBitSetters::versiontemplate(const CryptoKey* msg) {
  return *msg->versiontemplate_;
}
void CryptoKey::clear_primary() {
  if (GetArenaNoVirtual() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
void CryptoKey::clear_versiontemplate() {
  if (GetArenaNoVirtual() == nullptr && versiontemplate_ != nullptr) {
    delete versiontemplate_;
  }
  versiontemplate_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKey::kNameFieldNumber;
const int CryptoKey::kPrimaryFieldNumber;
const int CryptoKey::kVersionTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKey::CryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MvdS.ksvc.CryptoKey)
}
CryptoKey::CryptoKey(const CryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_primary()) {
    primary_ = new ::MvdS::ksvc::CryptoKeyVersion(*from.primary_);
  } else {
    primary_ = nullptr;
  }
  if (from.has_versiontemplate()) {
    versiontemplate_ = new ::MvdS::ksvc::CryptoKeyVersionTemplate(*from.versiontemplate_);
  } else {
    versiontemplate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MvdS.ksvc.CryptoKey)
}

void CryptoKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CryptoKey_ksvc_5fcryptokey_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&versiontemplate_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(versiontemplate_));
}

CryptoKey::~CryptoKey() {
  // @@protoc_insertion_point(destructor:MvdS.ksvc.CryptoKey)
  SharedDtor();
}

void CryptoKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete versiontemplate_;
}

void CryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptoKey& CryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CryptoKey_ksvc_5fcryptokey_2eproto.base);
  return *internal_default_instance();
}


void CryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:MvdS.ksvc.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && versiontemplate_ != nullptr) {
    delete versiontemplate_;
  }
  versiontemplate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptoKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CryptoKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MvdS.ksvc.CryptoKey.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .MvdS.ksvc.CryptoKeyVersion primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MvdS::ksvc::CryptoKeyVersion::_InternalParse;
        object = msg->mutable_primary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MvdS.ksvc.CryptoKeyVersionTemplate versionTemplate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MvdS::ksvc::CryptoKeyVersionTemplate::_InternalParse;
        object = msg->mutable_versiontemplate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MvdS.ksvc.CryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MvdS.ksvc.CryptoKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MvdS.ksvc.CryptoKeyVersion primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MvdS.ksvc.CryptoKeyVersionTemplate versionTemplate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_versiontemplate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MvdS.ksvc.CryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MvdS.ksvc.CryptoKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MvdS.ksvc.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CryptoKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .MvdS.ksvc.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::primary(this), output);
  }

  // .MvdS.ksvc.CryptoKeyVersionTemplate versionTemplate = 3;
  if (this->has_versiontemplate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::versiontemplate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MvdS.ksvc.CryptoKey)
}

::google::protobuf::uint8* CryptoKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MvdS.ksvc.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MvdS.ksvc.CryptoKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .MvdS.ksvc.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::primary(this), target);
  }

  // .MvdS.ksvc.CryptoKeyVersionTemplate versionTemplate = 3;
  if (this->has_versiontemplate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::versiontemplate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MvdS.ksvc.CryptoKey)
  return target;
}

size_t CryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MvdS.ksvc.CryptoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .MvdS.ksvc.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .MvdS.ksvc.CryptoKeyVersionTemplate versionTemplate = 3;
  if (this->has_versiontemplate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *versiontemplate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MvdS.ksvc.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKey* source =
      ::google::protobuf::DynamicCastToGenerated<CryptoKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MvdS.ksvc.CryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MvdS.ksvc.CryptoKey)
    MergeFrom(*source);
  }
}

void CryptoKey::MergeFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MvdS.ksvc.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_primary()) {
    mutable_primary()->::MvdS::ksvc::CryptoKeyVersion::MergeFrom(from.primary());
  }
  if (from.has_versiontemplate()) {
    mutable_versiontemplate()->::MvdS::ksvc::CryptoKeyVersionTemplate::MergeFrom(from.versiontemplate());
  }
}

void CryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MvdS.ksvc.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKey::CopyFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MvdS.ksvc.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKey::IsInitialized() const {
  return true;
}

void CryptoKey::Swap(CryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoKey::InternalSwap(CryptoKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
  swap(versiontemplate_, other->versiontemplate_);
}

::google::protobuf::Metadata CryptoKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ksvc_5fcryptokey_2eproto);
  return ::file_level_metadata_ksvc_5fcryptokey_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ksvc
}  // namespace MvdS
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::MvdS::ksvc::CryptoKey* Arena::CreateMaybeMessage< ::MvdS::ksvc::CryptoKey >(Arena* arena) {
  return Arena::CreateInternal< ::MvdS::ksvc::CryptoKey >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
