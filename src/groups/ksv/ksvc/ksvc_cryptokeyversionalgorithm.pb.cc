// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ksvc_cryptokeyversionalgorithm.proto

#include "ksvc_cryptokeyversionalgorithm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace MvdS {
namespace ksvc {
}  // namespace ksvc
}  // namespace MvdS
void InitDefaults_ksvc_5fcryptokeyversionalgorithm_2eproto() {
}

constexpr ::google::protobuf::Metadata* file_level_metadata_ksvc_5fcryptokeyversionalgorithm_2eproto = nullptr;
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ksvc_5fcryptokeyversionalgorithm_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ksvc_5fcryptokeyversionalgorithm_2eproto = nullptr;
const ::google::protobuf::uint32 TableStruct_ksvc_5fcryptokeyversionalgorithm_2eproto::offsets[1] = {};
static constexpr ::google::protobuf::internal::MigrationSchema* schemas = nullptr;
static constexpr ::google::protobuf::Message* const* file_default_instances = nullptr;

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ksvc_5fcryptokeyversionalgorithm_2eproto = {
  {}, AddDescriptors_ksvc_5fcryptokeyversionalgorithm_2eproto, "ksvc_cryptokeyversionalgorithm.proto", schemas,
  file_default_instances, TableStruct_ksvc_5fcryptokeyversionalgorithm_2eproto::offsets,
  file_level_metadata_ksvc_5fcryptokeyversionalgorithm_2eproto, 0, file_level_enum_descriptors_ksvc_5fcryptokeyversionalgorithm_2eproto, file_level_service_descriptors_ksvc_5fcryptokeyversionalgorithm_2eproto,
};

const char descriptor_table_protodef_ksvc_5fcryptokeyversionalgorithm_2eproto[] =
  "\n$ksvc_cryptokeyversionalgorithm.proto\022\t"
  "MvdS.ksvc*c\n\031CryptoKeyVersionAlgorithm\022,"
  "\n(CRYPTO_KEY_VERSION_ALOGRITHM_UNSPECIFI"
  "ED\020\000\022\030\n\024SYMMETRIC_ENCRYPTION\020\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ksvc_5fcryptokeyversionalgorithm_2eproto = {
  false, InitDefaults_ksvc_5fcryptokeyversionalgorithm_2eproto, 
  descriptor_table_protodef_ksvc_5fcryptokeyversionalgorithm_2eproto,
  "ksvc_cryptokeyversionalgorithm.proto", &assign_descriptors_table_ksvc_5fcryptokeyversionalgorithm_2eproto, 158,
};

void AddDescriptors_ksvc_5fcryptokeyversionalgorithm_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ksvc_5fcryptokeyversionalgorithm_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ksvc_5fcryptokeyversionalgorithm_2eproto = []() { AddDescriptors_ksvc_5fcryptokeyversionalgorithm_2eproto(); return true; }();
namespace MvdS {
namespace ksvc {
const ::google::protobuf::EnumDescriptor* CryptoKeyVersionAlgorithm_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ksvc_5fcryptokeyversionalgorithm_2eproto);
  return file_level_enum_descriptors_ksvc_5fcryptokeyversionalgorithm_2eproto[0];
}
bool CryptoKeyVersionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ksvc
}  // namespace MvdS
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
